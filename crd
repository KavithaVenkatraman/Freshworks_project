import java.util.*;
import java.io.*;
import org.json.*;
import java.awt.*;
import org.json.simple.JSONValue;  
import java.time.LocalDateTime;  
import java.time.format.DateTimeFormatter;  
import org.json.simple.JSONObject;
public final class DataStore {
private String dataStoreLoc = "";
private String dataStoreName = "";
public DataStore() {
try {
dataStoreLoc = Constants.defaultDataStoreLoc;
dataStoreName = "datastore-" + CommonUtils.getProcessName();
} catch (Exception exception) {

}
}
public DataStore(String filePath) {
try {
dataStoreLoc = filePath;
dataStoreName = "datastore-" + CommonUtils.getProcessName();
} catch (Exception exception) {

}

}
public synchronized String create(String key, JSONObject value) {
try {
return create(key, value, -1);
} catch (Exception exception) {
return Constants.FAILURE_CREATE;
}
}

public synchronized String create(String key, JSONObject value,
int timeToLive) {
try {
String filePath = dataStoreLoc + "/" + dataStoreName;
if (!CommonUtils.isKeyNameValid(key)) {
return Constants.FAILURE_KEY_LENGTH_EXCEEDED;
}
if (CommonUtils.isKeyExists(key, filePath)) {
return Constants.FAILURE_KEY_ALREADY_AVAILABLE;
}
Data data = new Data();
data.setKey(key);
if (timeToLive > 0) {
data.setTimeToLive(timeToLive);
} else {
data.setTimeToLive(-1);
}
data.setValue(value);
data.setCreationDateTimeMillis(new Date().getTime());

if (CommonUtils.writeData(data, filePath)) {
return Constants.SUCCESS_CREATE;
} else {
return Constants.FAILURE_CREATE;
}
} catch (Exception exception) {
return Constants.FAILURE_CREATE;
}
}

public synchronized Object read(String key) {
try {
String filePath = dataStoreLoc + "/" + dataStoreName;
if (!CommonUtils.isKeyNameValid(key)) {
return Constants.FAILURE_KEY_LENGTH_EXCEEDED;
}
if (!CommonUtils.isKeyExists(key, filePath)) {
return Constants.FAILURE_KEY_NOT_AVAILABLE;
}

Data data = CommonUtils.readData(key, filePath);
if (null != data) {
return data.getValue();
}
return Constants.FAILURE_READ;
} catch (Exception exception) {
exception.printStackTrace();
return Constants.FAILURE_READ;
}
}

public synchronized Object delete(String key) {
try {
String filePath = dataStoreLoc + "/" + dataStoreName;
if (!CommonUtils.isKeyNameValid(key)) {
return Constants.FAILURE_KEY_LENGTH_EXCEEDED;
}
if (!CommonUtils.isKeyExists(key, filePath)) {
return Constants.FAILURE_KEY_NOT_AVAILABLE;
}

if (CommonUtils.deleteData(key, filePath)) {
return Constants.SUCCESS_DELETE;
}
return Constants.FAILURE_DELETE;
} catch (Exception exception) {
exception.printStackTrace();
return Constants.FAILURE_DELETE;
}
}
}
public class coll {
public static void main(String[] args) {
JSONObject jsonObject = new JSONObject();
jsonObject.put("firstName", "John");
jsonObject.put("lastName", "Britto");
jsonObject.put("address", "Chennai");
System.out.println("CREATE");
DataStore myDataStore = new DataStore("C:\\Users\\xyz\\Documents\\DataStore");
System.out.println(myDataStore.create("1", jsonObject, 10));// success
System.out.println(myDataStore.create("1", jsonObject));// failure
System.out.println(myDataStore.create("1", jsonObject, 10));// failure
System.out.println(myDataStore.create("2", jsonObject));// success
System.out.println(myDataStore.creat"helloDataStoreThisIsKeyNameValidation", new JSONObject()));
try {
Thread.sleep(100);
} catch (InterruptedException e) {
e.printStackTrace();
}
System.out.println("AFTER WAIT");
jsonObject.put("age", "25");
System.out.println(myDataStore.create("1", jsonObject, 10));
System.out.println(myDataStore.create("1", jsonObject));
System.out.println(myDataStore.create("1", jsonObject, 10));
System.out.println(myDataStore.create("2", jsonObject));
System.out.println("READ");
System.out.println(myDataStore.read("1"));
System.out.println(myDataStore.read("2"));
System.out.println(myDataStore.read("3"));
System.out.println(myDataStore.read("helloDataStoreThisIsKeyNameValidation"));
try {
Thread.sleep(100);
} catch (InterruptedException e) {
e.printStackTrace();
}
System.out.println("AFTER WAIT");
System.out.println(myDataStore.read("1"));
System.out.println(myDataStore.read("2"));
System.out.println("DELETE");
System.out.println(myDataStore.delete("1"));
System.out.println(myDataStore.delete("2"));
System.out.println(myDataStore.delete("2"));
System.out.println(myDataStore.delete("3"));
System.out.println(myDataStor.delete("helloDataStoreThisIsKeyNameValidation"));
}
